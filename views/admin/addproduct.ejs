<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Byteverse | User-management</title>
        <link rel="stylesheet" href="/css/admin/addproduct.css" />
        <link rel="shortcut icon" href="/assets/images/icons/favicon.ico" />
        <!-- Cropper.js CSS -->
        <link rel="stylesheet" href="https://unpkg.com/cropperjs/dist/cropper.min.css" />
        <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet" />
        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js" async></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    </head>

    <body>
        <div class="dashboard-container">
            <!-- Sidebar -->
            <aside class="unique-sidebar">
                <div class="unique-sidebar-header">
                    <h2>Byteverse</h2>
                </div>
                <ul class="unique-sidebar-menu">
                    <li><a href="/admin/dashboard">Dashboard</a></li>
                    <li><a href="/admin/user-management">Users</a></li>
                    <li class="active"><a href="#">Products</a></li>
                    <li><a href="/admin/order-management">Orders</a></li>
                    <li><a href="/admin/category-management">Categories</a></li>
                    <li><a href="/admin/coupon-management">Coupon</a></li>
                    <li><a href="/admin/offer-management">Offers</a></li>
                    
                </ul>
            </aside>
            <!-- Main Content -->
            <div class="product-list-container">
                <h1>Add Product</h1>

                <!-- Breadcrumbs -->
                <nav class="breadcrumbs">
                    <a href="/admin/dashboard">Dashboard</a>
                    <span>&gt;</span>
                    <a href="/admin/product-management">Product-Management</a>
                    <span>&gt;</span>
                    <a href="#">Add-product</a>
                </nav>
                <% if (error_msg) { %>
                <div class="error-message" id="error"><%= error_msg %></div>
                <% } %> <% if (success_msg) { %>
                <div class="success-message" id="error"><%= success_msg %></div>
                <% } %>
                <form id="product-form" method="POST" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="name">Product Name:</label>
                        <input type="text" id="name" name="name" onkeyup="validateName()" />
                        <span class="error" id="name-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="brand">Brand:</label>
                        <select id="brand" name="brand" onchange="validateBrand()">
                            <option value="" disabled selected>Select a brand</option>
                            <option value="Apple">Apple</option>
                            <option value="Dell">Dell</option>
                            <option value="HP">HP</option>
                            <option value="Lenovo">Lenovo</option>
                            <option value="Asus">Asus</option>
                            <option value="Acer">Acer</option>
                            <option value="Microsoft">Microsoft</option>
                            <option value="MSI">MSI</option>
                            <option value="Razer">Razer</option>
                            <option value="Samsung">Samsung</option>
                            <option value="Toshiba">Toshiba</option>
                            <option value="Sony">Sony</option>
                            <option value="Huawei">Huawei</option>
                            <option value="Xiaomi">Xiaomi</option>
                            <option value="Alienware">Alienware</option>
                            <option value="Gigabyte">Gigabyte</option>
                            <option value="LG">LG</option>
                        </select>
                        <span class="error" id="brand-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="category">Category:</label>
                        <select id="category" name="category" onchange="validateCategory()">
                            <option value="" disabled selected>Select a category</option>
                            <% categories.forEach(function(category) { %> <% if (category.status === "listed") { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                            <% } %> <% }); %>
                        </select>
                        <span class="error" id="category-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="price">Price:</label>
                        <input type="number" id="price" name="price" oninput="validatePrice()" />
                        <span class="error" id="price-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="stock">Stock:</label>
                        <input type="number" name="stock" id="stock" oninput="validateStock()" />
                        <span class="error" id="stock-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="processor-brand">Processor Brand:</label>
                        <select id="processor-brand" name="specifications[processor][brand]" onchange="validateProcessorBrand()">
                            <option value="" disabled selected>Select a processor brand</option>
                            <option value="Intel">Intel</option>
                            <option value="AMD">AMD</option>
                        </select>
                        <span class="error" id="processor-brand-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="processor-model">Processor Model:</label>
                        <input type="text" id="processor-model" name="specifications[processor][model]" oninput="validateProcessorModel()" />
                        <span class="error" id="processor-model-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="processor-cores">Processor Cores:</label>
                        <input type="number" id="processor-cores" name="specifications[processor][cores]" oninput="validateProcessorCores()" />
                        <span class="error" id="processor-cores-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="processor-speed">Processor Speed:</label>
                        <input type="text" id="processor-speed" name="specifications[processor][speed]" oninput="validateProcessorSpeed()" />
                        <span class="error" id="processor-speed-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="ram-size">RAM Size (GB):</label>
                        <select id="ram-size" name="specifications[ram][size]" onchange="validateRamSize()">
                            <option value="" disabled selected>Select RAM size</option>
                            <option value="4">4 GB</option>
                            <option value="8">8 GB</option>
                            <option value="16">16 GB</option>
                            <option value="32">32 GB</option>
                        </select>
                        <span class="error" id="ram-size-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="ram-type">RAM Type:</label>
                        <select id="ram-type" name="specifications[ram][type]" onchange="validateRamType()">
                            <option value="" disabled selected>Select RAM type</option>
                            <option value="DDR4">DDR4</option>
                            <option value="DDR5">DDR5</option>
                        </select>
                        <span class="error" id="ram-type-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="storage-type">Storage Type:</label>
                        <select id="storage-type" name="specifications[storage][type]" onchange="validateStorageType()">
                            <option value="" disabled selected>Select storage type</option>
                            <option value="SSD">SSD</option>
                            <option value="HDD">HDD</option>
                            <option value="Hybrid">Hybrid</option>
                        </select>
                        <span class="error" id="storage-type-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="storage-capacity">Storage Capacity:</label>
                        <select id="storage-capacity" name="specifications[storage][capacity]" onchange="validateStorageCapacity()">
                            <option value="" disabled selected>Select storage capacity</option>
                            <option value="256GB">256 GB</option>
                            <option value="512GB">512 GB</option>
                            <option value="1TB">1 TB</option>
                            <option value="2TB">2 TB</option>
                        </select>
                        <span class="error" id="storage-capacity-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="display-size">Display Size:</label>
                        <input type="text" id="display-size" name="specifications[display][size]" oninput="validateDisplaySize()" />
                        <span class="error" id="display-size-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="display-resolution">Display Resolution:</label>
                        <input type="text" id="display-resolution" name="specifications[display][resolution]" oninput="validateDisplayResolution()" />
                        <span class="error" id="display-resolution-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="graphics-brand">Graphics Brand:</label>
                        <select id="graphics-brand" name="specifications[graphics][brand]" onchange="validateGraphicsBrand()">
                            <option value="" disabled selected>Select a graphics brand</option>
                            <option value="NVIDIA">NVIDIA</option>
                            <option value="AMD">AMD</option>
                        </select>
                        <span class="error" id="graphics-brand-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="graphics-model">Graphics Model:</label>
                        <input type="text" id="graphics-model" name="specifications[graphics][model]" oninput="validateGraphicsModel()" />
                        <span class="error" id="graphics-model-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="graphics-memory">Graphics Memory (in GB):</label>
                        <input type="text" id="graphics-memory" name="specifications[graphics][memory]" oninput="validateGraphicsMemory()" />
                        <span class="error" id="graphics-memory-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="battery-type">Battery Type:</label>
                        <select id="battery-type" name="specifications[battery][type]" onchange="validateBatteryType()">
                            <option value="" disabled selected>Select battery type</option>
                            <option value="Lithium-ion">Lithium-ion</option>
                            <option value="Lithium-polymer">Lithium-polymer</option>
                        </select>
                        <span class="error" id="battery-type-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="battery-capacity">Battery Capacity (in mAh):</label>
                        <input type="text" id="battery-capacity" name="specifications[battery][capacity]" oninput="validateBatteryCapacity()" />
                        <span class="error" id="battery-capacity-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="os">Operating System:</label>
                        <select id="os" name="specifications[os]" onchange="validateOperatingSystem()">
                            <option value="" disabled selected>Select an operating system</option>
                            <option value="Windows">Windows</option>
                            <option value="Linux">Linux</option>
                            <option value="macOS">macOS</option>
                        </select>
                        <span class="error" id="os-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="weight">Weight:</label>
                        <input type="text" id="weight" name="specifications[weight]" oninput="validateWeight()" />
                        <span class="error" id="weight-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="width">Width:</label>
                        <input type="number" id="width" name="specifications[dimensions][width]" oninput="validateWidth()" />
                        <span class="error" id="width-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="height">Height:</label>
                        <input type="number" id="height" name="specifications[dimensions][height]" oninput="validateHeight()" />
                        <span class="error" id="height-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="depth">Depth:</label>
                        <input type="number" id="depth" name="specifications[dimensions][depth]" oninput="validateDepth()" />
                        <span class="error" id="depth-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="warranty">Warranty:</label>
                        <input type="text" id="warranty" name="warranty" value="" oninput="validateWarranty()" />
                        <span class="error" id="warranty-error"></span>
                    </div>

                    <div class="form-group" style="width: 100%">
                        <label for="warranty">Description:</label>
                        <textarea style="width: 97.3%; height: 100px;padding: 10px;" name="description" id="description" oninput="validateDescripion()"></textarea>
                        <span class="error" id="description-error"></span>
                    </div>

                    <div class="form-group">
                        <label for="images">Upload Product Images (Minimum 3):</label>
                        <div id="image-upload-container">
                            <div class="image-upload">
                                <input type="file" accept="image/*" class="image-input" onchange="initializeCropper(this, 0)" />
                                <input type="file" name="croppedImage[]" id="croppedImage-0" accept="image/*" hidden />
                                <img id="image-preview-0" class="image-preview" style="display: none; max-width: 200px" />
                                <button type="button" class="crop-btn" onclick="cropImage(0)">Crop</button>
                                <input type="radio" name="primaryImageIndex" value="0" /> Set as Primary
                            </div>
                        </div>
                        <button type="button" id="add-image-btn">Add More Images</button>
                    </div>

                    <button type="submit">Add Product</button>
                </form>
            </div>
        </div>

        <script src="/javascripts/admin/formvalidation.js"></script>
        <script>
            function base64ToFile(base64, filename) {
                const arr = base64.split(",");
                const mime = arr[0].match(/:(.*?);/)[1];
                const bstr = atob(arr[1]);
                let n = bstr.length;
                const u8arr = new Uint8Array(n);

                while (n--) {
                    u8arr[n] = bstr.charCodeAt(n);
                }

                return new File([u8arr], filename, { type: mime });
            }

            let croppers = []; // Store cropper instances
            let croppedImages = []; // Store cropped images for form submission

            // Initialize Cropper.js when an image is selected
            function initializeCropper(input, index) {
                if (input.files && input.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const imgElement = document.getElementById(`image-preview-${index}`);
                        const croppedImage = document.getElementById(`croppedImage-${index}`);
                        imgElement.src = e.target.result;
                        imgElement.style.display = "block";

                        // Initialize cropper after image is loaded
                        if (croppers[index]) {
                            croppers[index].destroy(); // Destroy any existing cropper before initializing a new one
                        }

                        croppers[index] = new Cropper(imgElement, {
                            aspectRatio: 1, // Adjust aspect ratio as needed
                            viewMode: 1,
                            background: false,
                        });
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            }

            // Crop the image and replace the preview with the cropped version
            function cropImage(index) {
                console.log(index);
                const cropper = croppers[index];
                if (cropper) {
                    const croppedCanvas = cropper.getCroppedCanvas();
                    // Convert the cropped image to a base64 string for JSON submission
                    const base64Image = croppedCanvas.toDataURL("image/jpeg");

                    croppedImages[index] = base64Image; // Store base64 image in the array

                    // Convert Base64 to File
                    const file = base64ToFile(croppedImages[index], `image[${index}].png`);

                    // Create a DataTransfer object to set the file input
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);

                    // Set the file input'1s files to the DataTransfer object
                    const fileInput = document.getElementById(`croppedImage-${index}`);
                    fileInput.files = dataTransfer.files;

                    // Replace the canvas with the actual cropped image preview
                    const imgElement = document.getElementById(`image-preview-${index}`);
                    imgElement.src = base64Image; // Set the cropped image as the new source
                    imgElement.style.display = "block"; // Ensure it's visible

                    // Destroy the cropper instance
                    cropper.destroy();
                    croppers[index] = null; // Clear the cropper instance
                }
            }

            // Add more image upload inputs dynamically
            document.getElementById("add-image-btn").addEventListener("click", function () {
                const container = document.getElementById("image-upload-container");
                const newIndex = container.getElementsByClassName("image-upload").length;

                const newImageUpload = `
                    <div class="image-upload">
                        <input type="file" accept="image/*" class="image-input" onchange="initializeCropper(this, ${newIndex})">
                        <input type="file" name="croppedImage[]" id="croppedImage-${newIndex}" accept="image/*" hidden/>
                        <img id="image-preview-${newIndex}" class="image-preview" style="display:none; max-width: 200px;"/>
                        <button type="button" class="crop-btn" onclick="cropImage(${newIndex})">Crop</button>
                        <input type="radio" name="primaryImageIndex" value="${newIndex}"> Set as Primary
                    </div>
                `;
                container.insertAdjacentHTML("beforeend", newImageUpload);
            });

            const error = document.getElementById("error");
            if (error) {
                setTimeout(() => {
                    error.style.display = "none";
                }, 3000);
            }
        </script>
    </body>
</html>
