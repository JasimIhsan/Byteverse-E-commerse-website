<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Byteverse | Coupon Management</title>
        <link rel="stylesheet" href="/css/admin/coupon.css" />
        <!-- Include SweetAlert2 CSS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />

        <!-- Include SweetAlert2 JS -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    </head>

    <body>
        <div class="dashboard-container">
            <!-- Sidebar -->
            <aside class="unique-sidebar">
                <div class="unique-sidebar-header">
                    <h2>Byteverse</h2>
                </div>
                <ul class="unique-sidebar-menu">
                    <li><a href="/admin/dashboard">Dashboard</a></li>
                    <li><a href="/admin/user-management">Users</a></li>
                    <li><a href="/admin/product-management">Products</a></li>
                    <li><a href="/admin/order-management">Orders</a></li>
                    <li><a href="/admin/category-management">Categories</a></li>
                    <li><a href="/admin/coupon-management">Coupons</a></li>
                    <li class="active"><a href="#">Offers</a></li>
                    <li><a href="#">Support</a></li>
                    <li><a href="#">Settings</a></li>
                </ul>
            </aside>
            <!-- Main Content -->
            <div class="product-list-container">
                <h1>Offer Management</h1>

                <!-- Breadcrumbs -->
                <nav class="breadcrumbs">
                    <a href="/admin/dashboard">Dashboard</a>
                    <span>&gt;</span>
                    <a href="#">Offer Management</a>
                </nav>

                <div class="product-search-filter">
                    <div style="display: flex">
                        <form action="/admin/offer-management" method="get">
                            <input type="text" name="search" placeholder="Search products..." class="search-input" value="<%= search %>" />
                            <button class="add-product-btn" type="submit">Search</button>
                        </form>
                        <% if (search) { %>
                        <form action="/admin/offer-management" method="GET" style="margin-left: 10px">
                            <input type="hidden" name="search" value="" />
                            <button type="submit" class="add-product-btn">Show All</button>
                        </form>
                        <% } %>
                    </div>
                    <!-- Button to trigger the modal -->
                    <button class="add-product-btn" id="addOfferBtn">+ Add Offer</button>
                </div>

                <table class="product-table">
                    <thead>
                        <tr>
                            <th>SI No</th>
                            <th>Title</th>
                            <th>Discount Amount</th>
                            <th>Applicable Categories</th>
                            <th>Applicable Products</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (offers.length > 0) { %> <% offers.forEach(function(offer, index) { %>
                        <tr>
                            <td><%= index + 1 %></td>
                            <td><%= offer.title %></td>
                            <td>â‚¹<%= offer.discountAmount.toFixed(2) %></td>

                            <!-- Display applicable categories -->
                            <td><% if (offer.applicableCategories.length > 0) { %> <%= offer.applicableCategories.length %> category <% } else { %> - <% } %></td>

                            <!-- Display applicable products -->
                            <td><% if (offer.applicableProducts.length > 0) { %> <%= offer.applicableProducts.length %> item <% } else { %> - <% } %></td>

                            <td><%= new Date(offer.startDate).toLocaleDateString() %></td>
                            <td><%= new Date(offer.endDate).toLocaleDateString() %></td>

                            <!-- Action buttons -->
                            <td style="display: flex">
                                <!-- Offer status update button -->
                                <button class="action-btn view-btn" onclick="updateOfferStatus('<%= offer._id %>', <%= offer.isActive %>)" style='background-color: <%= offer.isActive ? "red" : "green" %>; color: white'><%= offer.isActive ? 'Deactivate' : 'Activate' %></button>
                                <button class="action-btn view-btn" onclick="openEditOfferModal('<%= offer._id %>')">Edit</button>
                                <button class="action-btn delete-btn" onclick="deleteOffer('<%= offer._id %>')">Delete</button>
                            </td>
                        </tr>
                        <% }); %> <% } else { %>
                        <tr>
                            <td colspan="9">No offers available.</td>
                        </tr>
                        <% } %>
                    </tbody>
                </table>

                <!-- Pagination -->
                <div class="pagination">
                    <% if (currentPage > 1) { %>
                    <a href="/admin/offer-management?page=<%= currentPage - 1 %>&search=<%= search %>" class="page-btn">Previous</a>
                    <% } else { %>
                    <span class="page-btn disabled">Previous</span>
                    <!-- Disabled if on the first page -->
                    <% } %>

                    <div class="pagination-buttons">
                        <% for (let i = 1; i <= totalPages; i++) { %>
                        <a href="/admin/offer-management?page=<%= i %>&search=<%= search %>" class="page-btn <%= currentPage === i ? 'active' : '' %>"><%= i %></a>
                        <% } %>
                    </div>

                    <% if (currentPage < totalPages) { %>
                    <a href="/admin/offer-management?page=<%= currentPage + 1 %>&search=<%= search %>" class="page-btn">Next</a>
                    <% } else { %>
                    <span class="page-btn disabled">Next</span>
                    <!-- Disabled if on the last page -->
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Add Offer Modal -->
        <div id="addOfferModal" class="custom-modal">
            <div class="custom-modal-content" style="max-width: none; width: 50%">
                <span class="custom-modal-close">&times;</span>
                <h2 style="text-align: center">Add New Offer</h2>
                <form id="offerForm">
                    <div class="form-group">
                        <label for="offerTitle">Offer Title</label>
                        <input type="text" id="offerTitle" name="offerTitle" class="form-control" required onkeyup="validateOfferTitle()" />
                        <span class="error" id="offerTitleError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="discountAmount">Discount (Flat Discount)</label>
                        <input type="number" id="discountAmount" name="discountAmount" class="form-control" required onkeyup="validateDiscountAmount()" />
                        <span class="error" id="discountAmountError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="offerType">Offer Type</label>
                        <select id="offerType" name="offerType" class="form-control" required onchange="validateOfferType()">
                            <option value="">Select Offer Type</option>
                            <option value="category">Category</option>
                            <option value="product">Product</option>
                        </select>
                        <span class="error" id="offerTypeError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group" id="categoryInputGroup" style="display: none">
                        <label style="margin-bottom: 20px">Applicable Categories</label>
                        <div>
                            <% categories.forEach(category => { %>
                            <div style="display: flex; align-items: center; margin-bottom: 10px">
                                <input style="margin-right: 15px; width: 17px; height: 17px; background-color: black; color: white" type="checkbox" id="category_<%= category._id %>" name="editApplicableCategories" value="<%= category._id %>" onchange="validateApplicableCategories()" />
                                <p style="margin: 0px"><%= category.name %></p>
                            </div>
                            <% }) %>
                        </div>
                        <span class="error" id="editApplicableCategoriesError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group" id="productInputGroup" style="display: none">
                        <label style="margin-bottom: 20px">Applicable Products</label>
                        <input style="margin-bottom: 20px" type="text" id="productSearch" placeholder="Search Products..." onkeyup="filterProducts()" class="form-control" />
                        <div id="productList">
                            <% products.forEach(product => { %>
                            <div style="display: flex; align-items: center; margin-bottom: 10px" class="product-item">
                                <input style="margin-right: 15px; width: 17px; height: 17px" type="checkbox" id="product_<%= product._id %>" name="editApplicableProducts" value="<%= product._id %>" onchange="validateApplicableProducts()" />
                                <p style="margin: 0px"><%= product.name %></p>
                            </div>
                            <% }) %>
                        </div>
                        <span class="error" id="editApplicableProductsError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="minimumPrice">Minimum Price of Product</label>
                        <input type="number" id="minimumPrice" name="minimumPrice" class="form-control" required onkeyup="validateMinimumPrice()" />
                        <span class="error" id="minimumPriceError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="startDate">Start Date</label>
                        <input type="date" id="startDate" name="startDate" class="form-control" required onchange="validateStartDate()" />
                        <span class="error" id="startDateError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="endDate">End Date</label>
                        <input type="date" id="endDate" name="endDate" class="form-control" required onchange="validateEndDate()" />
                        <span class="error" id="endDateError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>

                    <div class="form-group" style="display: flex; justify-content: center">
                        <button style="width: 30%" type="button" id="submitOfferBtn" class="btn btn-primary" onclick="submitOffer()">Add Offer</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Edit Offer Modal -->
        <div id="editOfferModal" class="custom-modal" style="display: none">
            <div class="custom-modal-content" style="max-width: none; width: 50%">
                <span class="custom-modal-close">&times;</span>
                <h2>Edit Offer</h2>
                <form id="editOfferForm">
                    <input type="hidden" id="editOfferId" name="editOfferId" />
                    <div class="form-group">
                        <label for="editOfferTitle">Offer Title</label>
                        <input type="text" id="editOfferTitle" name="editOfferTitle" class="form-control" required />
                        <span class="error" id="editOfferTitleError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="editDiscountAmount">Discount (Flat Discount)</label>
                        <input type="number" id="editDiscountAmount" name="editDiscountAmount" class="form-control" required />
                        <span class="error" id="editDiscountAmountError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="editOfferType">Offer Type</label>
                        <select id="editOfferType" name="offerType" class="form-control" required onchange="toggleOfferInputGroups()">
                            <option value="">Select Offer Type</option>
                            <option value="category" <%= offers.offerType === 'category' ? 'selected' : '' %>>Category</option>
                            <option value="product" <%= offers.offerType === 'product' ? 'selected' : '' %>>Product</option>
                        </select>
                    </div>

                    <div class="form-group" id="editCategoryInputGroup" style="display: none">
                        <label style="margin-bottom: 20px">Applicable Categories</label>
                        <div>
                            <% categories.forEach(category => { %>
                            <div style="display: flex; align-items: center; margin-bottom: 10px">
                                <input style="margin-right: 15px; width: 17px; height: 17px; background-color: black; color: white" type="checkbox" id="editCategory_<%= category._id %>" name="editApplicableCategories" value="<%= category._id %>" />
                                <p style="margin: 0px"><%= category.name %></p>
                            </div>
                            <% }) %>
                        </div>
                        <span class="error" id="editApplicableCategoriesError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group" id="editProductInputGroup" style="display: none">
                        <label style="margin-bottom: 20px">Applicable Products</label>
                        <input style="margin-bottom: 20px" type="text" id="editProductSearch" placeholder="Search Products..." onkeyup="filterProducts()" class="form-control" />
                        <div id="editProductList">
                            <% products.forEach(product => { %>
                            <div style="display: flex; align-items: center; margin-bottom: 10px" class="product-item">
                                <input style="margin-right: 15px; width: 17px; height: 17px" type="checkbox" id="editProduct_<%= product._id %>" name="editApplicableProducts" value="<%= product._id %>" />
                                <p style="margin: 0px"><%= product.name %></p>
                            </div>
                            <% }) %>
                        </div>
                        <span class="error" id="editApplicableProductsError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="editminimumPrice">Minimum Price of Product</label>
                        <input type="number" id="editminimumPrice" name="editminimumPrice" class="form-control" required />
                        <span class="error" id="editminimumPriceError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="editStartDate">Start Date</label>
                        <input type="date" id="editStartDate" name="editStartDate" class="form-control" required />
                        <span class="error" id="editStartDateError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <div class="form-group">
                        <label for="editEndDate">End Date</label>
                        <input type="date" id="editEndDate" name="editEndDate" class="form-control" required />
                        <span class="error" id="editEndDateError" style="color: red; display: none; font-size: 0.8rem; margin-top: 5px"></span>
                    </div>
                    <button type="button" id="submitEditOfferBtn" class="btn btn-primary" onclick="submitEditOffer()">Update Offer</button>
                </form>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

        <!-- modal scripts -->
        <script>
            //-------------------- Add Offer Modal --------------------------//

            const addOfferModal = document.getElementById("addOfferModal");
            const addOfferBtn = document.getElementById("addOfferBtn");
            const addOfferCloseBtn = document.getElementsByClassName("custom-modal-close")[0];

            addOfferBtn.onclick = function () {
                addOfferModal.style.display = "block";
            };

            addOfferCloseBtn.onclick = function () {
                addOfferModal.style.display = "none";
            };

            window.onclick = function (event) {
                if (event.target == addOfferModal) {
                    addOfferModal.style.display = "none";
                } else if (event.target === editOfferModal) {
                    editOfferModal.style.display = "none";
                }
            };

            //show dynamic category and product
            document.getElementById("offerType").addEventListener("change", function () {
                const selectedType = this.value;
                const categoryGroup = document.getElementById("categoryInputGroup");
                const productGroup = document.getElementById("productInputGroup");

                if (selectedType === "category") {
                    categoryGroup.style.display = "block";
                    productGroup.style.display = "none";
                } else if (selectedType === "product") {
                    categoryGroup.style.display = "none";
                    productGroup.style.display = "block";
                } else {
                    // If no valid selection, hide both
                    categoryGroup.style.display = "none";
                    productGroup.style.display = "none";
                }
            });

            //add offer search
            function filterProducts() {
                const searchInput = document.getElementById("productSearch").value.toLowerCase();
                const productItems = document.querySelectorAll(".product-item");

                productItems.forEach((item) => {
                    const label = item.querySelector("p").innerText.toLowerCase();
                    if (label.includes(searchInput)) {
                        item.style.display = "";
                        item.style.display = "flex";
                    } else {
                        item.style.display = "none";
                    }
                });
            }

            //--------------------- edit modal scripts ----------------------------//

            //dynamic offertype selsect
            function toggleOfferInputGroups() {
                const offerType = document.getElementById("editOfferType").value;
                const categoryInputGroup = document.getElementById("editCategoryInputGroup");
                const productInputGroup = document.getElementById("editProductInputGroup");

                if (offerType === "category") {
                    categoryInputGroup.style.display = "block";
                    productInputGroup.style.display = "none";
                } else if (offerType === "product") {
                    productInputGroup.style.display = "block";
                    categoryInputGroup.style.display = "none";
                } else {
                    categoryInputGroup.style.display = "none";
                    productInputGroup.style.display = "none";
                }
            }

            //populating edit modal
            async function openEditOfferModal(offerId) {
                try {
                    const response = await axios.get(`/admin/offer-management/${offerId}`);
                    const offer = response.data;

                    if (offer) {
                        document.getElementById("editOfferId").value = offer._id;
                        document.getElementById("editOfferTitle").value = offer.title;
                        document.getElementById("editDiscountAmount").value = offer.discountAmount;
                        document.getElementById("editminimumPrice").value = offer.minimumPrice;
                        document.getElementById("editStartDate").value = offer.startDate.split("T")[0];
                        document.getElementById("editEndDate").value = offer.endDate.split("T")[0];

                        document.querySelectorAll("input[name='editApplicableCategories']").forEach((checkbox) => {
                            checkbox.checked = false;
                        });

                        document.querySelectorAll("input[name='editApplicableProducts']").forEach((checkbox) => {
                            checkbox.checked = false;
                        });

                        offer.applicableCategories.forEach((categoryId) => {
                            const categoryCheckbox = document.getElementById(`editCategory_${categoryId._id}`);
                            if (categoryCheckbox) {
                                categoryCheckbox.checked = true;
                            }
                        });

                        offer.applicableProducts.forEach((productId) => {
                            const productCheckbox = document.getElementById(`editProduct_${productId._id}`);
                            if (productCheckbox) {
                                productCheckbox.checked = true;
                            }
                        });

                        const offerType = offer.offerType;
                        document.getElementById("editOfferType").value = offerType;

                        toggleOfferInputGroups();

                        // Show the modal
                        document.getElementById("editOfferModal").style.display = "block";
                    }
                } catch (error) {
                    console.error("Error fetching offer details:", error);
                    Swal.fire("Error!", "Failed to fetch offer details. Please try again.", "error");
                }
            }

            // Add event listener to offer type select
            document.getElementById("offerType").addEventListener("change", function () {
                const selectedOfferType = this.value;
                toggleInputGroups(selectedOfferType);
            });

            // Edit Offer Modal
            const editOfferModal = document.getElementById("editOfferModal");
            const editOfferCloseBtn = document.getElementsByClassName("custom-modal-close")[1]; // Assuming there's a close button for the edit modal as well

            editOfferCloseBtn.onclick = function () {
                editOfferModal.style.display = "none";
            };

            //edit offer search
            function filterProducts() {
                const searchInput = document.getElementById("editProductSearch").value.toLowerCase();
                const productItems = document.querySelectorAll(".product-item");

                productItems.forEach((item) => {
                    const label = item.querySelector("p").innerText.toLowerCase();
                    if (label.includes(searchInput)) {
                        item.style.display = "";
                        item.style.display = "flex";
                    } else {
                        item.style.display = "none";
                    }
                });
            }
        </script>

        <!-- requset functions -->
        <script>
            //submit add offer
            document.getElementById("submitOfferBtn").addEventListener("click", async function () {
                const offerTitle = document.getElementById("offerTitle").value;
                const discountAmount = document.getElementById("discountAmount").value;
                const offerType = document.getElementById("offerType").value;
                const minimumPrice = document.getElementById("minimumPrice").value;
                const startDate = document.getElementById("startDate").value;
                const endDate = document.getElementById("endDate").value;

                const editApplicableCategories = Array.from(document.querySelectorAll('input[name="editApplicableCategories"]:checked')).map((input) => input.value);

                const editApplicableProducts = Array.from(document.querySelectorAll('input[name="editApplicableProducts"]:checked')).map((input) => input.value);

                const data = {
                    title: offerTitle,
                    discountAmount: discountAmount,
                    offerType: offerType,
                    applicableCategories: editApplicableCategories,
                    applicableProducts: editApplicableProducts,
                    minimumPrice: minimumPrice,
                    startDate: startDate,
                    endDate: endDate,
                };

                try {
                    const response = await axios.post("/admin/offer-management/add-offer", data);

                    Swal.fire({
                        title: "Success!",
                        text: response.data.message || "Offer added successfully!",
                        icon: "success",
                        button: "OK",
                    }).then(() => {
                        location.reload();
                    });
                } catch (error) {
                    const errorMessage = error.response?.data?.message || "An error occurred. Please try again.";
                    Swal.fire({
                        title: "Error!",
                        text: errorMessage,
                        icon: "error",
                        button: "Try Again",
                    });
                }
            });

            //update offer (edit offer)
            async function updateOffer() {
                const offerId = document.getElementById("editOfferId").value; // Get the offer ID
                const offerData = {
                    title: document.getElementById("editOfferTitle").value,
                    discountAmount: document.getElementById("editDiscountAmount").value,
                    minimumPrice: document.getElementById("editminimumPrice").value,
                    startDate: document.getElementById("editStartDate").value,
                    endDate: document.getElementById("editEndDate").value,
                    applicableCategories: Array.from(document.querySelectorAll("input[name='editApplicableCategories']:checked")).map((cb) => cb.value),
                    applicableProducts: Array.from(document.querySelectorAll("input[name='editApplicableProducts']:checked")).map((cb) => cb.value),
                    offerType: document.getElementById("editOfferType").value,
                };

                const confirmed = await Swal.fire({
                    title: "Are you sure?",
                    text: "Do you really want to update this offer?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, update it!",
                    cancelButtonText: "No, cancel!",
                });

                if (confirmed.isConfirmed) {
                    try {
                        const response = await axios.put(`/admin/offer-management/edit-offer/${offerId}`, offerData);
                        if (response.status === 200) {
                            Swal.fire({
                                title: "Success!",
                                text: "Offer updated successfully.",
                                icon: "success",
                                confirmButtonText: "OK",
                            }).then(() => {
                                location.reload();
                            });
                        }
                    } catch (error) {
                        console.error("Error updating offer:", error);
                        Swal.fire({
                            title: "Error!",
                            text: "Failed to update offer. Please try again.",
                            icon: "error",
                            confirmButtonText: "OK",
                        });
                    }
                } else {
                    Swal.fire({
                        title: "Cancelled",
                        text: "The update has been cancelled.",
                        icon: "info",
                        confirmButtonText: "OK",
                    });
                }
            }

            //status update
            function updateOfferStatus(offerId, isActive) {
                // Determine the new status (toggle between active and inactive)
                const newStatus = !isActive;

                Swal.fire({
                    title: "Are you sure?",
                    text: `Do you want to ${newStatus ? "activate" : "deactivate"} this offer?`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, change it!",
                }).then((result) => {
                    if (result.isConfirmed) {
                        axios
                            .put(`/admin/offer-management/update-status/${offerId}`, { isActive: newStatus })
                            .then((response) => {
                                Swal.fire({
                                    title: "Success!",
                                    text: response.data.message || "Offer status updated successfully!",
                                    icon: "success",
                                    confirmButtonText: "OK",
                                }).then(() => {
                                    location.reload();
                                });
                            })
                            .catch((error) => {
                                const errorMessage = error.response?.data?.message || "An error occurred. Please try again.";
                                Swal.fire({
                                    title: "Error!",
                                    text: errorMessage,
                                    icon: "error",
                                    confirmButtonText: "OK",
                                });
                            });
                    }
                });
            }

            //delete offer
            function deleteOffer(offerId) {
                Swal.fire({
                    title: "Are you sure?",
                    text: "You won't be able to revert this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!",
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Send DELETE request using Axios
                        axios
                            .delete(`/admin/offer-management/delete-offer/${offerId}`)
                            .then((response) => {
                                Swal.fire({
                                    title: "Deleted!",
                                    text: response.data.message || "Offer deleted successfully!",
                                    icon: "success",
                                    confirmButtonText: "OK",
                                }).then(() => {
                                    location.reload();
                                });
                            })
                            .catch((error) => {
                                const errorMessage = error.response?.data?.message || "An error occurred. Please try again.";
                                Swal.fire({
                                    title: "Error!",
                                    text: errorMessage,
                                    icon: "error",
                                    confirmButtonText: "OK",
                                });
                            });
                    }
                });
            }
        </script>
        <script>
            function validateOfferTitle() {
                const offerTitle = document.getElementById("offerTitle").value.trim();
                const errorElement = document.getElementById("offerTitleError");
                if (offerTitle.length < 3) {
                    errorElement.innerText = "Offer title must be at least 3 characters.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            function validateDiscountAmount() {
                const discountAmount = document.getElementById("discountAmount").value;
                const errorElement = document.getElementById("discountAmountError");
                if (discountAmount <= 0) {
                    errorElement.innerText = "Discount amount must be a positive number.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            function validateOfferType() {
                const offerType = document.getElementById("offerType").value;
                const errorElement = document.getElementById("offerTypeError");
                if (!offerType) {
                    errorElement.innerText = "Please select an offer type.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                    // Show relevant input groups based on selected offer type
                    toggleInputGroups(offerType);
                }
            }

            function toggleInputGroups(offerType) {
                const categoryInputGroup = document.getElementById("categoryInputGroup");
                const productInputGroup = document.getElementById("productInputGroup");
                if (offerType === "category") {
                    categoryInputGroup.style.display = "block";
                    productInputGroup.style.display = "none";
                } else if (offerType === "product") {
                    categoryInputGroup.style.display = "none";
                    productInputGroup.style.display = "block";
                }
            }

            function validateApplicableCategories() {
                const checkboxes = document.querySelectorAll('input[name="editApplicableCategories"]:checked');
                const errorElement = document.getElementById("editApplicableCategoriesError");
                if (checkboxes.length === 0) {
                    errorElement.innerText = "Please select at least one category.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            function validateApplicableProducts() {
                const checkboxes = document.querySelectorAll('input[name="editApplicableProducts"]:checked');
                const errorElement = document.getElementById("editApplicableProductsError");
                if (checkboxes.length === 0) {
                    errorElement.innerText = "Please select at least one product.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            function validateMinimumPrice() {
                const minimumPrice = document.getElementById("minimumPrice").value;
                const errorElement = document.getElementById("minimumPriceError");
                if (minimumPrice <= 0) {
                    errorElement.innerText = "Minimum price must be a positive number.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }
            function validateStartDate() {
                const startDate = new Date(document.getElementById("startDate").value);
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Set time to midnight to only compare dates
                const errorElement = document.getElementById("startDateError");

                if (isNaN(startDate)) {
                    errorElement.innerText = "Please select a valid start date.";
                    errorElement.style.display = "block";
                    return false;
                } else if (startDate < today) {
                    errorElement.innerText = "Start date must be today or a future date.";
                    errorElement.style.display = "block";
                    return false;
                } else {
                    errorElement.style.display = "none";
                    return true;
                }
            }

            function validateEndDate() {
                const endDate = new Date(document.getElementById("endDate").value);
                const startDate = new Date(document.getElementById("startDate").value);
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Set time to midnight to only compare dates
                const errorElement = document.getElementById("endDateError");

                if (isNaN(endDate)) {
                    errorElement.innerText = "Please select a valid end date.";
                    errorElement.style.display = "block";
                    return false;
                } else if (endDate < today) {
                    errorElement.innerText = "End date must be today or a future date.";
                    errorElement.style.display = "block";
                    return false;
                } else if (endDate < startDate) {
                    errorElement.innerText = "End date must be after the start date.";
                    errorElement.style.display = "block";
                    return false;
                } else {
                    errorElement.style.display = "none";
                    return true;
                }
            }

            function submitOffer() {
                // Validate all fields before submission
                validateOfferTitle();
                validateDiscountAmount();
                validateOfferType();
                validateApplicableCategories();
                validateApplicableProducts();
                validateMinimumPrice();
                validateStartDate();
                validateEndDate();

                // Check if any errors are visible
                const errorElements = document.querySelectorAll(".error");
                let hasError = false;
                errorElements.forEach((error) => {
                    if (error.style.display === "block") {
                        hasError = true;
                    }
                });

                if (!hasError) {
                    // Submit the form if all validations pass
                    document.getElementById("offerForm").submit();
                }
            }

            // Validate Offer Title
            function validateEditOfferTitle() {
                const titleInput = document.getElementById("editOfferTitle");
                const errorElement = document.getElementById("editOfferTitleError");
                if (titleInput.value.trim().length < 3) {
                    errorElement.innerText = "Offer title must be at least 3 characters long.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            // Validate Discount Amount
            function validateEditDiscountAmount() {
                const discountInput = document.getElementById("editDiscountAmount");
                const errorElement = document.getElementById("editDiscountAmountError");
                if (discountInput.value <= 0) {
                    errorElement.innerText = "Discount must be a positive number.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            // Validate Minimum Price
            function validateEditMinimumPrice() {
                const minimumPriceInput = document.getElementById("editminimumPrice");
                const errorElement = document.getElementById("editminimumPriceError");
                if (minimumPriceInput.value < 0) {
                    errorElement.innerText = "Minimum price cannot be negative.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            // Validate Start Date
            function validateEditStartDate() {
                const startDateInput = document.getElementById("editStartDate");
                const errorElement = document.getElementById("editStartDateError");
                if (!startDateInput.value) {
                    errorElement.innerText = "Start date is required.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            // Validate End Date
            function validateEditEndDate() {
                const endDateInput = document.getElementById("editEndDate");
                const startDateInput = document.getElementById("editStartDate");
                const errorElement = document.getElementById("editEndDateError");

                if (!endDateInput.value) {
                    errorElement.innerText = "End date is required.";
                    errorElement.style.display = "block";
                } else if (endDateInput.value < startDateInput.value) {
                    errorElement.innerText = "End date must be after start date.";
                    errorElement.style.display = "block";
                } else {
                    errorElement.style.display = "none";
                }
            }

            // Handle Offer Type Change
            function toggleOfferInputGroups() {
                const offerType = document.getElementById("editOfferType").value;
                document.getElementById("editCategoryInputGroup").style.display = offerType === "category" ? "block" : "none";
                document.getElementById("editProductInputGroup").style.display = offerType === "product" ? "block" : "none";
            }

            function submitEditOffer() {
                // Validate all fields before submission
                validateEditOfferTitle();
                validateEditDiscountAmount();
                validateEditMinimumPrice();
                validateEditStartDate();
                validateEditEndDate();

                // Check if any errors are visible
                const errorElements = document.querySelectorAll(".error");
                let hasError = false;
                errorElements.forEach((error) => {
                    if (error.style.display === "block") {
                        hasError = true;
                    }
                });

                if (!hasError) {
                    // Submit the form if all validations pass
                    document.getElementById("editOfferForm").submit();
                }
            }

            // Attach onkeyup and onchange events
            document.getElementById("editOfferTitle").onkeyup = validateEditOfferTitle;
            document.getElementById("editDiscountAmount").onkeyup = validateEditDiscountAmount;
            document.getElementById("editminimumPrice").onkeyup = validateEditMinimumPrice;
            document.getElementById("editStartDate").onchange = validateEditStartDate;
            document.getElementById("editEndDate").onchange = validateEditEndDate;
        </script>
    </body>
</html>
