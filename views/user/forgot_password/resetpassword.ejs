<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Reset Password</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                background-color: #f4f4f5;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                margin: 0;
            }
            .card {
                background-color: white;
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                width: 350px;
                padding: 24px;
            }
            .card-header {
                margin-bottom: 24px;
                text-align: center;
            }
            .card-title {
                font-size: 24px;
                font-weight: bold;
                margin: 0 0 8px 0;
            }
            .card-description {
                color: #6b7280;
                margin: 0;
            }
            .form-group {
                margin-bottom: 16px;
            }
            label {
                display: block;
                margin-bottom: 8px;
                font-weight: 500;
            }
            input {
                width: 95%;
                padding: 8px;
                border: 1px solid #d1d5db;
                border-radius: 4px;
                font-size: 16px;
            }

            .button {
                background-color: #5c59e8;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 10px 16px;
                font-size: 16px;
                cursor: pointer;
                width: 100%;
            }
            .button:hover {
                background-color: #3533a9;
            }
            .button:disabled {
                background-color: #9ca3af;
                cursor: not-allowed;
            }
            .link {
                color: #3b82f6;
                text-decoration: none;
                font-size: 14px;
                display: block;
                text-align: center;
                margin-top: 16px;
            }
            .link:hover {
                text-decoration: underline;
            }
            .error {
                color: red;
                margin-top: 0.5rem;
                border: 0px;
                display: none;
            }
            .toggle-password {
                cursor: pointer;
                margin-left: -30px;
            }
        </style>
    </head>
    <body>
        <div class="card">
            <div class="card-header">
                <h1 class="card-title">Reset Password</h1>
                <p class="card-description">Enter your new password</p>
            </div>
            <form id="resetPasswordForm">
                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <div class="input-wrapper">
                        <input type="password" name="password" id="newPassword" onkeyup="validatePassword()" />
                        <span class="toggle-password" id="toggleNewPassword">üëÅÔ∏è</span>
                        <div class="error" id="passwordError"></div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <div class="input-wrapper">
                        <input type="password" id="confirmPassword" onkeyup="validateConfirmPassword()" />
                        <span class="toggle-password" id="toggleConfirmPassword">üëÅÔ∏è</span>
                        <div class="error" id="confirmPasswordError"></div>
                    </div>
                </div>
                <div class="error" id="error-message"></div>
                <button type="submit" class="button">Reset Password</button>
            </form>
            <a href="/login" class="link">Back to Login</a>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
            // Toggle password visibility for newPassword field
            const toggleNewPassword = document.getElementById("toggleNewPassword");
            const newPasswordInput = document.getElementById("newPassword");

            toggleNewPassword.addEventListener("click", function () {
                const type = newPasswordInput.getAttribute("type") === "password" ? "text" : "password";
                newPasswordInput.setAttribute("type", type);
                this.textContent = type === "password" ? "üëÅÔ∏è" : "üôà"; // Toggle between eye and eye-slash emoji
            });

            // Toggle password visibility for confirmPassword field
            const toggleConfirmPassword = document.getElementById("toggleConfirmPassword");
            const confirmPasswordInput = document.getElementById("confirmPassword");

            toggleConfirmPassword.addEventListener("click", function () {
                const type = confirmPasswordInput.getAttribute("type") === "password" ? "text" : "password";
                confirmPasswordInput.setAttribute("type", type);
                this.textContent = type === "password" ? "üëÅÔ∏è" : "üôà"; // Toggle between eye and eye-slash emoji
            });

            const resetPasswordForm = document.getElementById("resetPasswordForm");

            resetPasswordForm.addEventListener("submit", async function (e) {
                e.preventDefault(); // Prevent the form from submitting the default way

                const newPassword = newPasswordInput.value;
                const confirmPassword = confirmPasswordInput.value;

                // Validate if passwords match
                if (newPassword !== confirmPassword) {
                    Swal.fire({
                        icon: "error",
                        title: "Passwords Mismatch",
                        text: "Passwords do not match!",
                    });
                    return;
                }

                try {
                    const response = await axios.post("/login/enter-email/otp-enter/new-password", {
                        password: newPassword,
                    });

                    console.log("response : ", response);

                    if (response.data.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Password Reset",
                            text: "Password has been reset successfully!",
                            confirmButtonText: "OK",
                        }).then(() => {
                            window.location.href = "/login?message=Password has been reset successfully";
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: error.response.data.message,
                        });
                    }
                } catch (error) {
                    console.error("Error during password reset request:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: error.response.data.message,
                    });
                }
            });

            // Function for validating password
            function validatePassword() {
                const passwordInput = document.getElementById("newPassword");
                const passwordError = document.getElementById("passwordError");

                // Strong password regex: Minimum 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character
                const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;

                if (passwordInput.value.trim() === "") {
                    passwordError.style.display = "block";
                    passwordError.textContent = "Password cannot be empty.";
                    passwordError.style.color = "red";
                } else if (passwordInput.value.includes(" ")) {
                    passwordError.style.display = "block";
                    passwordError.textContent = "Password cannot contain spaces.";
                    passwordError.style.color = "red";
                } else if (passwordInput.value.length < 8) {
                    passwordError.style.display = "block";
                    passwordError.textContent = "Password must be at least 8 characters long.";
                    passwordError.style.color = "red";
                } else if (!strongPasswordRegex.test(passwordInput.value)) {
                    passwordError.style.display = "block";
                    passwordError.textContent = "Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character.";
                    passwordError.style.color = "red";
                } else {
                    passwordError.textContent = "";
                }
            }

            // Function for validating confirm password
            function validateConfirmPassword() {
                const password = document.getElementById("newPassword").value;
                const confirmPassword = document.getElementById("confirmPassword").value;
                const confirmPasswordError = document.getElementById("confirmPasswordError");

                if (password !== confirmPassword) {
                    confirmPasswordError.style.display = "block";
                    confirmPasswordError.textContent = "Passwords do not match";
                    return false;
                } else {
                    confirmPasswordError.style.display = "block";
                    confirmPasswordError.textContent = "";
                    return true;
                }
            }

            // Form submit handler
            resetPasswordForm.addEventListener("submit", function (e) {
                const passwordError = document.getElementById("passwordError").textContent;
                const confirmPasswordError = document.getElementById("confirmPasswordError").textContent;

                // Prevent submission if there are errors
                if (passwordError || confirmPasswordError) {
                    e.preventDefault();
                }
            });
        </script>
    </body>
</html>
